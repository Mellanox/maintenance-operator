// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	drain "github.com/Mellanox/maintenance-operator/internal/drain"
	mock "github.com/stretchr/testify/mock"
)

// DrainRequest is an autogenerated mock type for the DrainRequest type
type DrainRequest struct {
	mock.Mock
}

type DrainRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *DrainRequest) EXPECT() *DrainRequest_Expecter {
	return &DrainRequest_Expecter{mock: &_m.Mock}
}

// CancelDrain provides a mock function with given fields:
func (_m *DrainRequest) CancelDrain() {
	_m.Called()
}

// DrainRequest_CancelDrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelDrain'
type DrainRequest_CancelDrain_Call struct {
	*mock.Call
}

// CancelDrain is a helper method to define mock.On call
func (_e *DrainRequest_Expecter) CancelDrain() *DrainRequest_CancelDrain_Call {
	return &DrainRequest_CancelDrain_Call{Call: _e.mock.On("CancelDrain")}
}

func (_c *DrainRequest_CancelDrain_Call) Run(run func()) *DrainRequest_CancelDrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DrainRequest_CancelDrain_Call) Return() *DrainRequest_CancelDrain_Call {
	_c.Call.Return()
	return _c
}

func (_c *DrainRequest_CancelDrain_Call) RunAndReturn(run func()) *DrainRequest_CancelDrain_Call {
	_c.Call.Return(run)
	return _c
}

// LastError provides a mock function with given fields:
func (_m *DrainRequest) LastError() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DrainRequest_LastError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastError'
type DrainRequest_LastError_Call struct {
	*mock.Call
}

// LastError is a helper method to define mock.On call
func (_e *DrainRequest_Expecter) LastError() *DrainRequest_LastError_Call {
	return &DrainRequest_LastError_Call{Call: _e.mock.On("LastError")}
}

func (_c *DrainRequest_LastError_Call) Run(run func()) *DrainRequest_LastError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DrainRequest_LastError_Call) Return(_a0 error) *DrainRequest_LastError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DrainRequest_LastError_Call) RunAndReturn(run func() error) *DrainRequest_LastError_Call {
	_c.Call.Return(run)
	return _c
}

// Spec provides a mock function with given fields:
func (_m *DrainRequest) Spec() drain.DrainRequestSpec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Spec")
	}

	var r0 drain.DrainRequestSpec
	if rf, ok := ret.Get(0).(func() drain.DrainRequestSpec); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(drain.DrainRequestSpec)
	}

	return r0
}

// DrainRequest_Spec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Spec'
type DrainRequest_Spec_Call struct {
	*mock.Call
}

// Spec is a helper method to define mock.On call
func (_e *DrainRequest_Expecter) Spec() *DrainRequest_Spec_Call {
	return &DrainRequest_Spec_Call{Call: _e.mock.On("Spec")}
}

func (_c *DrainRequest_Spec_Call) Run(run func()) *DrainRequest_Spec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DrainRequest_Spec_Call) Return(_a0 drain.DrainRequestSpec) *DrainRequest_Spec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DrainRequest_Spec_Call) RunAndReturn(run func() drain.DrainRequestSpec) *DrainRequest_Spec_Call {
	_c.Call.Return(run)
	return _c
}

// StartDrain provides a mock function with given fields:
func (_m *DrainRequest) StartDrain() {
	_m.Called()
}

// DrainRequest_StartDrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartDrain'
type DrainRequest_StartDrain_Call struct {
	*mock.Call
}

// StartDrain is a helper method to define mock.On call
func (_e *DrainRequest_Expecter) StartDrain() *DrainRequest_StartDrain_Call {
	return &DrainRequest_StartDrain_Call{Call: _e.mock.On("StartDrain")}
}

func (_c *DrainRequest_StartDrain_Call) Run(run func()) *DrainRequest_StartDrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DrainRequest_StartDrain_Call) Return() *DrainRequest_StartDrain_Call {
	_c.Call.Return()
	return _c
}

func (_c *DrainRequest_StartDrain_Call) RunAndReturn(run func()) *DrainRequest_StartDrain_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with given fields:
func (_m *DrainRequest) State() drain.DrainState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 drain.DrainState
	if rf, ok := ret.Get(0).(func() drain.DrainState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(drain.DrainState)
	}

	return r0
}

// DrainRequest_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type DrainRequest_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *DrainRequest_Expecter) State() *DrainRequest_State_Call {
	return &DrainRequest_State_Call{Call: _e.mock.On("State")}
}

func (_c *DrainRequest_State_Call) Run(run func()) *DrainRequest_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DrainRequest_State_Call) Return(_a0 drain.DrainState) *DrainRequest_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DrainRequest_State_Call) RunAndReturn(run func() drain.DrainState) *DrainRequest_State_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *DrainRequest) Status() (drain.DrainStatus, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 drain.DrainStatus
	var r1 error
	if rf, ok := ret.Get(0).(func() (drain.DrainStatus, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() drain.DrainStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(drain.DrainStatus)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DrainRequest_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type DrainRequest_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *DrainRequest_Expecter) Status() *DrainRequest_Status_Call {
	return &DrainRequest_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *DrainRequest_Status_Call) Run(run func()) *DrainRequest_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DrainRequest_Status_Call) Return(_a0 drain.DrainStatus, _a1 error) *DrainRequest_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DrainRequest_Status_Call) RunAndReturn(run func() (drain.DrainStatus, error)) *DrainRequest_Status_Call {
	_c.Call.Return(run)
	return _c
}

// UID provides a mock function with given fields:
func (_m *DrainRequest) UID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DrainRequest_UID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UID'
type DrainRequest_UID_Call struct {
	*mock.Call
}

// UID is a helper method to define mock.On call
func (_e *DrainRequest_Expecter) UID() *DrainRequest_UID_Call {
	return &DrainRequest_UID_Call{Call: _e.mock.On("UID")}
}

func (_c *DrainRequest_UID_Call) Run(run func()) *DrainRequest_UID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DrainRequest_UID_Call) Return(_a0 string) *DrainRequest_UID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DrainRequest_UID_Call) RunAndReturn(run func() string) *DrainRequest_UID_Call {
	_c.Call.Return(run)
	return _c
}

// NewDrainRequest creates a new instance of DrainRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDrainRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *DrainRequest {
	mock := &DrainRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
