// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	drain "github.com/Mellanox/maintenance-operator/internal/drain"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/Mellanox/maintenance-operator/api/v1alpha1"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// AddRequest provides a mock function with given fields: req
func (_m *Manager) AddRequest(req drain.DrainRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(drain.DrainRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_AddRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRequest'
type Manager_AddRequest_Call struct {
	*mock.Call
}

// AddRequest is a helper method to define mock.On call
//   - req drain.DrainRequest
func (_e *Manager_Expecter) AddRequest(req interface{}) *Manager_AddRequest_Call {
	return &Manager_AddRequest_Call{Call: _e.mock.On("AddRequest", req)}
}

func (_c *Manager_AddRequest_Call) Run(run func(req drain.DrainRequest)) *Manager_AddRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(drain.DrainRequest))
	})
	return _c
}

func (_c *Manager_AddRequest_Call) Return(_a0 error) *Manager_AddRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_AddRequest_Call) RunAndReturn(run func(drain.DrainRequest) error) *Manager_AddRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetRequest provides a mock function with given fields: uid
func (_m *Manager) GetRequest(uid string) drain.DrainRequest {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetRequest")
	}

	var r0 drain.DrainRequest
	if rf, ok := ret.Get(0).(func(string) drain.DrainRequest); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drain.DrainRequest)
		}
	}

	return r0
}

// Manager_GetRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRequest'
type Manager_GetRequest_Call struct {
	*mock.Call
}

// GetRequest is a helper method to define mock.On call
//   - uid string
func (_e *Manager_Expecter) GetRequest(uid interface{}) *Manager_GetRequest_Call {
	return &Manager_GetRequest_Call{Call: _e.mock.On("GetRequest", uid)}
}

func (_c *Manager_GetRequest_Call) Run(run func(uid string)) *Manager_GetRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetRequest_Call) Return(_a0 drain.DrainRequest) *Manager_GetRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetRequest_Call) RunAndReturn(run func(string) drain.DrainRequest) *Manager_GetRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListRequests provides a mock function with given fields:
func (_m *Manager) ListRequests() []drain.DrainRequest {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListRequests")
	}

	var r0 []drain.DrainRequest
	if rf, ok := ret.Get(0).(func() []drain.DrainRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]drain.DrainRequest)
		}
	}

	return r0
}

// Manager_ListRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRequests'
type Manager_ListRequests_Call struct {
	*mock.Call
}

// ListRequests is a helper method to define mock.On call
func (_e *Manager_Expecter) ListRequests() *Manager_ListRequests_Call {
	return &Manager_ListRequests_Call{Call: _e.mock.On("ListRequests")}
}

func (_c *Manager_ListRequests_Call) Run(run func()) *Manager_ListRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_ListRequests_Call) Return(_a0 []drain.DrainRequest) *Manager_ListRequests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_ListRequests_Call) RunAndReturn(run func() []drain.DrainRequest) *Manager_ListRequests_Call {
	_c.Call.Return(run)
	return _c
}

// NewDrainRequest provides a mock function with given fields: _a0
func (_m *Manager) NewDrainRequest(_a0 *v1alpha1.NodeMaintenance) drain.DrainRequest {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewDrainRequest")
	}

	var r0 drain.DrainRequest
	if rf, ok := ret.Get(0).(func(*v1alpha1.NodeMaintenance) drain.DrainRequest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drain.DrainRequest)
		}
	}

	return r0
}

// Manager_NewDrainRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDrainRequest'
type Manager_NewDrainRequest_Call struct {
	*mock.Call
}

// NewDrainRequest is a helper method to define mock.On call
//   - _a0 *v1alpha1.NodeMaintenance
func (_e *Manager_Expecter) NewDrainRequest(_a0 interface{}) *Manager_NewDrainRequest_Call {
	return &Manager_NewDrainRequest_Call{Call: _e.mock.On("NewDrainRequest", _a0)}
}

func (_c *Manager_NewDrainRequest_Call) Run(run func(_a0 *v1alpha1.NodeMaintenance)) *Manager_NewDrainRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha1.NodeMaintenance))
	})
	return _c
}

func (_c *Manager_NewDrainRequest_Call) Return(_a0 drain.DrainRequest) *Manager_NewDrainRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_NewDrainRequest_Call) RunAndReturn(run func(*v1alpha1.NodeMaintenance) drain.DrainRequest) *Manager_NewDrainRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRequest provides a mock function with given fields: uid
func (_m *Manager) RemoveRequest(uid string) {
	_m.Called(uid)
}

// Manager_RemoveRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRequest'
type Manager_RemoveRequest_Call struct {
	*mock.Call
}

// RemoveRequest is a helper method to define mock.On call
//   - uid string
func (_e *Manager_Expecter) RemoveRequest(uid interface{}) *Manager_RemoveRequest_Call {
	return &Manager_RemoveRequest_Call{Call: _e.mock.On("RemoveRequest", uid)}
}

func (_c *Manager_RemoveRequest_Call) Run(run func(uid string)) *Manager_RemoveRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_RemoveRequest_Call) Return() *Manager_RemoveRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_RemoveRequest_Call) RunAndReturn(run func(string)) *Manager_RemoveRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
